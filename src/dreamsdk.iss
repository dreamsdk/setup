; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "DreamSDK"
#define MyAppVersion "R1"
#define MyAppPublisher "The DreamSDK Team"
#define MyAppURL "http://dreamsdk.sizious.com/"

#define AppManagerName "Manager" 

#define AppMainDirectory "{app}\msys\1.0\opt\dreamsdk\"
#define AppMainExeName AppMainDirectory + "\dreamsdk.exe"
#define AppManagerExeName AppMainDirectory + "\dreamsdk-manager.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{DF847892-5D85-4FFA-8603-E71750D81602}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={sd}\{#MyAppName}
DefaultGroupName={#MyAppName}
LicenseFile=C:\dcsdk\msys\1.0\opt\dreamsdk\LICENSE
OutputDir=..\bin
OutputBaseFilename=setup
Compression=none
SolidCompression=True
DisableWelcomePage=False
UninstallDisplayIcon={app}\dreamsdk.exe
UninstallFilesDir={app}\uninst

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\dcsdk\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{#AppMainExeName}"
Name: "{group}\{#AppManagerName}"; Filename: "{#AppManagerExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{#AppMainExeName}"; Tasks: desktopicon

[Run]
Filename: "{#AppMainExeName}"; Flags: nowait postinstall skipifsilent; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"

[CustomMessages]
InstallationDirectoryContainSpaces=Sorry, target installation directory cannot contain spaces. Choose a different one.
PrerequisiteMissing=Sorry, but prerequisites are not fully met, some components are missing from your computer: %s%nPlease install all of these components, then check they are available on your PATH environment variable and finally restart the installation.
PrerequisiteMissingPython=Python 2.7.x
PrerequisiteMissingGit=Git
PrerequisiteMissingSubversion=SVN
UnableToFinalizeSetup=Unable to finalize the {#MyAppName} setup!%nThe {#MyAppName} {#AppManagerName} application cannot be started. Please notify {#MyAppPublisher} to fix this. Visit {#MyAppURL} for more information.

[Code]
type
  TPrerequisiteApplication = (paGit, paPython, paSubversion);

const
  PYTHON_BRANCH_VERSION = '2.7';
  sLineBreak = #13#10;

var
  IsPythonInstalled,
  IsGitInstalled,
  IsSubversionInstalled: Boolean;

function PrerequisiteToString(const Prerequisite: TPrerequisiteApplication): String;
begin
  Result := '';
  case Prerequisite of
    paGit: 
      Result := 'git'; 
    paPython:
      Result := 'python';
    paSubversion:
      Result := 'svn';
  end;
end;

function GetExtractionTag(const Prerequisite: TPrerequisiteApplication): String;
begin
  Result := '';
  case Prerequisite of
    paGit:
      Result := 'git version';                  
    paPython:
      Result := 'Python';
    paSubversion:
      Result := 'svn, version';
  end;
end;

// Thanks Michel (Phidels.com)
function Left(SubStr: string; S: string): string;
begin
  result:=copy(s, 1, pos(substr, s)-1);
end;

// Thanks Michel (Phidels.com)
function Right(SubStr: string; S: string): string;
begin
  if pos(substr,s)=0 then result:='' else
    result:=copy(s, pos(substr, s)+length(substr), length(s)-pos(substr, s)+length(substr));
end;

// Thanks Michel (Phidels.com)
function ExtractStr(LeftSubStr, RightSubStr, S: string): string;
begin
  Result := Left(RightSubStr, Right(LeftSubStr, S));
end;

function IsInString(const SubStr, S: string): Boolean;
begin
  Result := Pos(LowerCase(SubStr), LowerCase(S)) > 0;
end;

function AdjustLineBreaks(const S: String): String;
begin
  Result := S;
  StringChangeEx(Result, #10, sLineBreak, True);
end;

// https://stackoverflow.com/a/1282143/3726096
function StartsWith( const AMatchStr, ATestStr : string ) : Boolean;
begin
  Result := AMatchStr = Copy( ATestStr, 1, Length( AMatchStr ));
end;

function GetPrerequisiteVersion(const Prerequisite: TPrerequisiteApplication): String;
var
  TmpFileName, CommandLine, PrerequisiteName, ExtractionTag: String;
  ExecBuffer: AnsiString;
  ResultCode: Integer; 

begin
  PrerequisiteName := PrerequisiteToString(Prerequisite);
  ExtractionTag := GetExtractionTag(Prerequisite);
      
  TmpFileName := Format('%s\%s.tmp', [ExpandConstant('{tmp}'), PrerequisiteName]);
  CommandLine := Format('/C %s --version > "%s" 2>&1', [PrerequisiteName, TmpFileName]);
  
  Exec(ExpandConstant('{cmd}'), CommandLine, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  if LoadStringFromFile(TmpFileName, ExecBuffer) then
  begin
    ExecBuffer := AdjustLineBreaks(ExecBuffer);
    Result := Trim(ExtractStr(ExtractionTag, sLineBreak, ExecBuffer));
  end;
  
  if FileExists(TmpFileName) then
    DeleteFile(TmpFileName);
end;

function CheckPrerequisites: Boolean;
var
  PrerequisiteVersion: String;

begin
  // Check Git
  PrerequisiteVersion := GetPrerequisiteVersion(paGit);
  IsGitInstalled := PrerequisiteVersion <> '';
  
  // Check Python
  PrerequisiteVersion := GetPrerequisiteVersion(paPython);    
  IsPythonInstalled := StartsWith(PYTHON_BRANCH_VERSION, PrerequisiteVersion);

  // Check Subversion
  PrerequisiteVersion := GetPrerequisiteVersion(paSubversion);
  IsSubversionInstalled := PrerequisiteVersion <> '';

  // Final result
  Result := IsGitInstalled and IsPythonInstalled and IsSubversionInstalled;  
end;

function MakePrerequisiteMessage(const ActualValue, NewPrerequisite: String): string;
begin
  Result := ActualValue + sLineBreak + ' - ' + CustomMessage(NewPrerequisite);
end;

function GeneratePrerequisiteMessage: String;
begin
  Result := '';    
  if not IsGitInstalled then
    Result := MakePrerequisiteMessage(Result, 'PrerequisiteMissingGit');
  if not IsPythonInstalled then
    Result := MakePrerequisiteMessage(Result, 'PrerequisiteMissingPython');
  if not IsSubversionInstalled then
    Result := MakePrerequisiteMessage(Result, 'PrerequisiteMissingSubversion');    
  Result := Format(CustomMessage('PrerequisiteMissing'), [Result]); 
end;

procedure PatchMountPoint;
var
  Temp, InstallPath, fstabFileName: String;
  Buffer: TStringList;

begin
  InstallPath := ExpandConstant('{app}');
  StringChangeEx(InstallPath, '\', '/', True);

  fstabFileName := ExpandConstant('{app}\msys\1.0\etc\fstab');
  Buffer := TStringList.Create;
  try
    Buffer.LoadFromFile(fstabFileName);
    Temp := Buffer.Text;
    StringChangeEx(Temp, '{app}', InstallPath, True);
    Buffer.Text := Temp;
    Buffer.SaveToFile(fstabFileName);
  finally
    Buffer.Free;
  end;
end;

procedure SetupDreamSDK;
var
  ResultCode: Integer;
  ManagerFileName: String;

begin
  ManagerFileName := ExpandConstant('{#AppManagerExeName}') + 'caca';
  if not Exec(ManagerFileName, '--post-install', '', SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode) then
    MsgBox(CustomMessage('UnableToFinalizeSetup'), mbCriticalError, MB_OK);
end;

///////////////////////////////////////////////////////////////////////////////

function InitializeSetup: Boolean;
begin
  Result := CheckPrerequisites;
  if not Result then        
    MsgBox(GeneratePrerequisiteMessage, mbError, MB_OK);
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  Result := True;
  
  // Avoid spaces in the Installation Path
  if (CurPageID = wpSelectDir) and (Pos(' ', WizardDirValue) > 0) then
  begin
    Result := False;
    MsgBox(CustomMessage('InstallationDirectoryContainSpaces'), mbError, MB_OK);
  end;

  // Patch fstab and setup KallistiOS.
  if (CurPageID = wpFinished) then
  begin
    PatchMountPoint;
    SetupDreamSDK;
  end;
end;
